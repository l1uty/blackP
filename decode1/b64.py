# base64加解密
import base64

def encode():
    source = "man"
    print(base64.b64encode(source.encode()))

    source = "你好刘同涌"
    print(base64.b64encode(source.encode()))

def decode():
    source = "bWFu"
    print(base64.b64decode(source).decode())

    source = "5L2g5aW95YiY5ZCM5raM"
    print(base64.b64decode(source).decode())

# 对文件进行base64编码,可以方便二进制在网络上传输
def file_encode():
    with open('./test.png', mode='rb') as file:
        data = file.read()
    print(base64.b64encode(data))
# 通过解密base64还原文件
def file_decode():
    source = ""
    data = base64.b64decode(source)
    with open('./decode.png', mode='wb') as file:
        file.write(data)

# hash解加密与加密文件
import hashlib

def hash_encode():
    source = "hellobaby"
    print(hashlib.md5(source.encode()).hexdigest())

    with open('./test.png', mode='rb') as file:
        data = file.read()
    print(hashlib.md5(data).hexdigest())

# SHA加密，是一种摘要算法，与MD5用法一致，差别在于SHA可以有不同的位数设定，强度更高
    print(hashlib.sha256(source.encode()).hexdigest())
    print(hashlib.sha512(source.encode()).hexdigest())

if __name__ == '__main__':
    hash_encode()